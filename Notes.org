* Notes on how to use cl-ledger



#+begin_src plantuml :file "cd.svg"
class binder

class "commodity-pool"
binder --> "commodity-pool"
"commodity-pool" "1" --> "*" commodity



class account
binder --> account
account --> "account-data"
account -> account : parent
account -> account : children


class journal
binder "1" --> "*" journal
journal -> account : default


class "binder-data"
binder --> "binder-data"





class entry
journal <-- entry


class transaction
entry "1" --> "*" transaction
#+end_src

#+RESULTS:
[[file:cd.svg]]

** Binder

The thing that holds everything together.
This can be created with

#+begin_src lisp
  (binder <pathname-to-dat-file>)
#+end_src



** Entry

Properties:

| Field          | Type          | Note                      | Example                   |
|----------------+---------------+---------------------------+---------------------------|
| actual-date    | fixed-time    |                           | 2023-05-01                |
| effective-date | fixed-time    |                           |                           |
| status         | item-status   | cleared/pending/..        | :cleared                  |
| code           | string        | ???                       |                           |
| payee          | string        | description               | Investment balance        |
| note           | string        |                           |                           |
| transactions   | * transaction | modifications to accounts | Assets:Brokerage +50 AAPL |
| position       | item-position | Location in source        | line 16-20                |
| normalizedp    | boolean       | ???                       |                           |
| data           |               | ???                       |                           |
|----------------+---------------+---------------------------+---------------------------|


This is a block in a ledger.dat file like this:

#+begin_example
05/01 * Investment balance
  Assets:Brokerage              50 AAPL @ $30.00
  Equity:Opening Balances
#+end_example



** Transaction



** Saving Data

this could be done with the =(print-report...)= code to rewrite the file from in-memory.

** Accounts and Envelopes

Either two ledgers, or do double transactions in the same entry??

* Ideas for Design


** Accounts

Let the account tree look like this:

- Assets::OnBudget::... ::
  The bank acounts etc that are budgeted.
- Assets::OffBudget::... ::
  What YNAB calls tracking accounts
- Assets::Budget::... ::
  The envelopes in the budget
- Assets::Budget::Unassigned ::
  The default envelope if not manual assigned
  
- Liabilities::OnBudget::... ::
- Liabilities::OffBudget::... ::
- Liabilities::Budget::Source ::
  This cancels the budget out to make it zero sum.
  Any transaction from and to a budget, goes to or from this account.  See below


** Budget Mutations

There are two type of budget transactions:
#+begin_example
  Liabilities::Budget::Source -->  Assets::Budget::...
  Assets::Budget::...         -->  Liabilities::Budget::Source
#+end_example

** Transactions involving budget

They will look like this:

#+begin_example
2023-05-01  Pay water
       Expenses::Water              200
       Assets::OnBudget::ING216    -200
      [Assets::Budget::Home]       -200
      [Liabities::Budget::Source]   200
#+end_example  

This is basically two transactions into 1:
- transfering the actual money
- Make money disappear from the budget  



* Displaying Data


** Account View (On Budget)

| Date | Payee/description | Budget Name | Value | ?Expense Name |



Budget name is the account that is classified as
- Assets::Budget::...
Expense namae is
- Expenses::...
  
** Account View (Off Budget)

| Date | Payee/description | Value | ?Expense Name|

* Simplistic idea?


Expenses are envelopes.

- negative, means there is money in the envelope

How to offset this?  


* TODO

** DONE Make binder root account working

This is a bug in =(binder ...)= function call.


** DONE Make write to file complete

It now loses
- virtual
- notes
- codes etc.

At least it is good enough for now.

*** TODO Should encode notes as Base64 or similar


** Make GUI components

*** Checkbox
*** Button

** Make OnBudget/Bank report work

Works, but needs clean up.
- Cleared/Pending status renderer
- Account/Fund/Target, make display name better

- Color inflow different from outflow, or make differnt columns.

General table layout.


** When reblocks server restarts clicking get errors

Need to some how handle the 'cannot find action' errors

** Sort transactions on date

(at least by default/initially)

** Sort Accounts / Budgets

Hm, sort on name.

(could later add sort key if needed.)

** Fix printing of format

- always same decimal places, this happens when a currency is used.
- DONE Convert rationals to decimal 
- Add currency symbol, this works when the currency is provided by the amount

** Use custom tags

** Line out display of accounts better.


** Use time ranges (select a month???)

Need maybe better report in time ranges.  YNAB shows:

- Accounts ::
  Can't check right now.

- Budget ::
  - Inflow for the time perios
  - Outflow for the time period
  - Balance at the end of the time period    

** Download button

*** Should add route dynamically???


* BUGS ??

The function =(binder *last-binder*)= will return a binder object whose root-account
does not have any children.

  


* Design

What level of widget do we want.

E.g. is status of an entry its own widget?
If so, do we every time dynamically create a widget?
